# def Count(motifs):
#     count = {}
#     k = len(motifs[0])
#     for symbol in "ACGT":
#         count[symbol] = [0] * k
#     for motif in motifs:
#         for i in range(k):
#             symbol = motif[i]
#             count[symbol][i] += 1
#     return count

# motifs = [
#     "TGCGGGTTTGAGGGAGACAAACGGAAGCAAATGGCCGGTTAGTTCATGCAAGGTCAGTAGAGAGGCATTCAACACGCCAGGACATAATTCTGGTACGCATTTGGAACTTCCATCCATACAGAGTGCCTCAAATCACCTCTTCTGAACCTAGACGACAGTCATACAGGAGTACGACCGTACCGGTTGAGGTTTCTCTGTGTGGAGAGTTCCGTTAGTTGTAACGGCCAATAAGGTGTTACAATCAAAACAAGTTCGCTCGTAATGCTATGTCTGAGGTTCCCTGGACGATCATTGAAATGCAATGGGCAACCATTAAGTATGAGGAGTAGCAACACCAAATCTTCAGCCTCAATTCTGTTCACCTAGTGATCTACCCGGGAGCAACCGTAGGACAGAGCTACCAGTCGGTCCACTAGACGGTCGCATCAAAATAAAGGGGAGGTTTTGCCTACAAAGATAGCCTAAAGGTACCATTCTAAACATTCGAGTTATCTTTTAGGCAGTGGGGTAAGTAGCGGATCATGGGTTGGGCAAACTGATTCCAACATGGGATTGCTGCGCTAAAAGATGTTCAGTGGGCGCAGTTCATTGTCGCGCGACCACGAGGCTGGTAGATATCGACGCGGCCACGGCTCCTTCGGTACCCGTCCTCGCCTTTTCGTCTTCCCGGAGCCGACTCAGGGTGTCATTGCTCAATAATAATTTGAATTTACCTTCCCGATGGCTAGGCCCGCGTACTTGCGATGGTGGTCGGCCATTATTTGCTGCGCGGTAGCAGCCATCACCATAGTTTAAGGGACGGGTTTACGGATTCGAGAAAAATAACTGGGGCGGTATTTCCCAGGGACGCTAAATAAGTAAAGTCAACAATTTTTGGCTCTTGGGAACGCTGAGATCGAAGGAGGGGTTTACCTGCTTAGAGCATCCGATCACTGAAGTGCGCGACAGTGCT",
#     "CAGTGGGGGCCCTGAAGTTGAGGAAGATAAGCCCCCGCGCGCTTGGAACTACGTAATCTTTCCTAACAGAAGACTTGTCCGGACGTATTGTGCCAAATAAGAGATAGGTGATCCATACACAGGCTGTGGACCGCTAGTATGTCGACGGTCCTGTAGCACTACCTACCCCTAGAACTTTTGGCTGACGATTAATGGTACCTGTCATTAGTCGTAAGACTCTTGCGTTGTGTCCATGGGTTTCAAGACCGAATCCGTGATACCATTCTACATGAAAAGGTCACCAAGTTACTACGAAACTTCAAAGGTGCCTTAAATCTTCGTACTGGCTTCCACGACGCATCAGATTTACCTACAGGCCTGTACCCGGTTCCGTTCCCCCATTGAATATGTTCTACTGACTGGACGTAATAAAATCTAGTTTTCAGTGTGGAGACGCTGATGGAAGGAACTGGGTCCCACCCGTGTAGGAACAACCACCTTCATACCTAATTCAATTATCGCAAGTGGCATTGCAAAGCTGTCTCTGCCAACATAGTCTTGCGATACAAGTCTGCCCAAAGGTTGGACTAAGCTTCGAAGGGCCGGGGAATACCCTGATCCGAGATTACCAACCCAATGTGCATTTTCTTGGGCAAGCCCTGTTGTTTCGCAGATAGCCTGCTCCACTGCCTTCTCCGAAAGTATACTCAAGGCTAGAATCTCGCCAGACAGGGATAGGTATGAGATGTGGCCGAGATTCGAACGCTCTACGGCAGGACATGCTTACTACAGATTGGTACACTAGTCACATCACGAAGTTCGAATACGAGAGACCTAAACTCCGATACGGAAGGATGGAGCTAGTGTATCGAGCTCAAGCACGAGACGTGAGACCAGCGTGTATGGGGTGAATCCTTCAAACAAGTCTTATCCTTCACTGCGACCTGCTTCCGAGGGTAGCAATTCGGAACCTT",
#     "TTGAGGCCACACGATATGTTGAAGGTCTGAGCGGGTCGCACGGCATCTGAACACCTTCTCTTCACCTCCGTAACGTTCGTAAGTAGCTGCTGTACCGTCCTCACCATTACCCTCGACGGCTGACTGGTCTGCATACAGGCCTTCTACTATCCATGTATCTGTCACGGTTTGTTTTTTCGCATAGCCCAAACTGAGAGATGAAATGACTTGTCTGTTACATTAGCAGGGGGATGATGTTAGGTGACGTACATCGACGCCCTCTGTATTGGCAGACGGACACGCAATAGTGTCACACGGTTGATTTGAGAGCCGACAAAGACCATGGATACAGTAAACACCACACCGCACACGTCCTAGAATCTCTTATTGCGCCCGCTTACCCTGGTCATGGTCGGCGGGTGAGACCCAGTTAGTGTCCCTTGTACAGACTGTGTCGTCCCATAAGCTAGCCTTCACGATAATGAGTCGCACTTTCGACTAAAATCTCGTCACCCGAGGATGCTCAACCAACCTAAGGTGAGTACCCTGTGCTACTAGGAAGCCATTCACACCCTAACGGGTACTATGCACTTCATAGCAATGCGTAAAGGGATTAAGCGCGAACGTCACAACGGCGCGACGCCGCAAAGGTATCCTTGAAGAACCCCATTCGAGTTAATCTATACAGTTAGGTATAAGGGTTGCGCATTGTTCTCCTCGTTGCCTTTTTTGTAACAGGAAGTAACGAGTCCTGATGAGTTACGACGCTGAGCCGGAGGGGGTACGTTATAGTAAATCAAAGGCTACTTCCTAGGCAGGCGCGATCTCGTTAATGGGCTGATTATCAACTTAACGGGCTTGGTCTATGTTAATCGCATTGCTTAGTATGGTTACACTCACCTTTCGGTGAGCTTATGGCGGAGTCACTCCCCACTAGTCCTGCACGGCTACAGTAGTTTCCAACATAGCGCCGTT",
#     "CGCTTGCTACAATTTATTGCATGGGTACTTGGAACGACAGGCGTATTCTGGGTAATGCAGTGTCAATCTATGTGCAGTCGTGAACCAGATGTCTATCCGTGCAGCACGGCAATGCAAACCCTATCAAGGAGTTCAGCGGAGACAAAAGAGGGCCGCGAGGGCTAAACTGTCTCTCATATTAGGGGAAGGTTTTCCCGATAACAAGCGATTCCACAAATGATCCAAACACGGCAACCCGGGGTGCTACAAGCCTCCTATAGTAGACCATCATACGTACCATCGTAGAGTCTACACCATTTAAAACACGTAGTATGAGGTAAATCACGGGTAGGAAGGTAACACGGAGCGTTTCCAAGTTATCGCGCGAGCCAAAGGTCCCCCAGGTACTACGGTCAGAGGGTGTAGTCAAGGTCGAACTTAGCCCATACCCGATCGGTGAGCAACCTCCCCGCCCAAGATATCAGAGAATGGACTGGCATTGTCTCAGACTCGGGGTAAGTTCGTGTTACTTGATACTCTAGTGGCACGCTAGAAATTGACGTTGATCGCTGTCGAGTATTATGTTTTCGCGCTTTTGGGTTCTGACCAACGTTTCAGACTGCTGTTGGCAGGAGCTTGGGTCACTTGTCGACGAAAGAGGTGAGTATGGCGTCGAACTTCCTGGGTGGACCTATAGACCTATTCGATACAGTCTCGTCCTCGTGTTAGCGTTGCCGGACCAGAGCTAATCGATGTATCAGCGCTTTGTTTGATAAAGAGTTCCTCTGCGGCGGTCATCGAACCGGTGACAAGACTGGCAGGCGTGCCTAAATGGACCATAGGCGCCTGTTTCCCTAGGGGCAAACTGCCGGGGCTAAACTTTCAACGTGTAGAACATTGTCTGCGACTGGCCACTGTCACTAGCCGAGCGTGTACCAGACAGCTTAGTTGAACCTTCCCTTAGATAGACATT",
#     "CAGACCAAAGCTTGACAGAAGATTGAACGGTCGCTCGCACCTAGTTGATTTTCCGTAGAGCTCGCCCGTGAACATACTTGGAATGGATCCAAACGGTGGAGCTATTCTCGAAAATAATCCGTCGGTCGAGGCATCATAAAGGCCAGGCAGTTTAGTGCGGACTACAGTGAAAGTAACAGATGATACTCTTGCAAGATCAGGCGCCTTGTCATTGGCGGACCGATATGGCTCTAGCTTCCCACTTTTTCTACACAATGATAGGTTATAGGGCATCTATAATGCCACAGTAATGTGCCTCACCGTACTGATTGGACGTTCATCCCTATTGGGGCGTCGGTCTAAGTGGTTCGTCAAGCAAGACATTGCCGTCCCGTTACCCCAGAGCAACTAGTGAATAGGTTGCCCTTCTCGGGCCGTGTATGAGCCTGCTCAATAGTCGCCAGTTGTTTTGGCTATGAATGCTGGTAGTGCGTTTGCGCCCGGAGGATGTTGTCAGGATGCCCTGTATACACTTATAGGAAAGCGGAACCGCAGCGCCGCAACCGTACTTGTAACCGCCACCAATATGTCGCATACTCGCTGTGATGGATTGCAAAGTGCGCCTAGACATACGTTTAAATCGTATATCAACCATCTAGTCGCAAAAGCTGGCAACGTCGACCGTTACATAGCAATTTACGCAGAGTTCGGAATGGCGACTATCTCCTGGCGGACTTTCGCGTGTCTGGACAGGAATGATATGGCGCTACAAGCAAGTTCTTCCCGCAAGGTAGATCCCCTCCATCGCCATCGGTGGAAGCTTTCGTCGCAACTCGGCGATCTAGTGACTTAAGGGCCAACTGAACACGCGAGAGGCTCTAAACCTTCTGACGATAATGAGGCTACTCGCATATGCGATTGCACCGCGCCTATCGCAAATTATTGGACCTACTCTTACCATCCGCCCGTGGGGC",
#     "CCAGTGTGGTGATAGCATCTTAATGGGAACGCAACGTTAGGACTGAAGTTCGGCCTTATCATCTCGAGGAGCAATATGCTCTCGGACCAGGTCACGGCCTACGGAAGGAAGCCCTAATAACTAGTCTGGCCACCTCGTCTATAGACATCGCACTCGTAGTTCTAACCCAACACAGGGAAGTGTCATGTCCTTTACATTAAACCGTGCTCGAACCTCGCCCGGCCTAAGAGTCTCGCCGAAATTTTTGCCCATTGGCCAGGGGGGTGTACCACACTTCTGGAAGTTGCGAGTCCGCGTATTAATTGGGGCCTATGAGTTTCGTTTTAATCGCGACTCGCCAGCCGCATGCCGGTGAAAGAGCCACGTTGTGCGCCGCGCGATGTAGGTCCAATCGACTGAAGACAAGAGCGACCACCAAAGTGACTGAGGGGGGTTCCTCAGCCCCCCGCGAAGTTCAGAGTGTAGATAGAACGAGAGATTGGATAGATCAACCTTGCTTATTACCGGCTGGAGCTTGTCGAACGGGAGATTCATTTGAGATAGGGCAGTATCCCGCCTAAAACAATCAAGCCCAGGAAGGGGTAGCTTCGCACAATCTCCAGCAATGTCTCTCAACCTGTGCAACTCTCTTTGGCCCAGCGTCTCTTTTATAGGTCCTAAGTCTGACGCGGGTAGCTGTAAAACCAGCAAAGTTGGGCTTCTGTCAAGTAGACGCCCACCGCGAGAACACCCTAGAGTTCCGGAGAGGAGGTCTACATCGATAGCCCAGCTTTCCTTAGAGTATGGTGAATACGGTCTGCCCGGAAGTGGGACACTGTAATGAATAACGTACTCAATACTAGCAGTTACTTAACTCGTCGAAATAACTGCATCAGGTTTTTCGGTACATTTGTAGTAAGCGCAATTTGACAAGGTTCGCCCCGCCGCGTATGGACCCGGTAAGGCCGAGCCTC",
#     "ATGCCGAGTGCACGGAACTCTCTAAACCCTTGACCTTGCATTCAGTGCCCGTGATCTCGCGCTCATGAGGAGGACGAAGTAAACTTGGTTCTTCCCATAAAGTCTCGAGGTCTTCCCGCTAATAGCAATTGCTCGCTACAACGACCTTGCGTATGTAAGGCCAGGAGCTCACAACAGGCGTGCTACCATATCTAAGGCCTAAAGCTCCCATCAAGTACACTTAGGATTAAAAAATCGAACCTTATGAAAAACGAACGCAGTATTGAGGTGGCTACACTAGTACCCAAACTTGGATTTAACGGCTATAGCGCGGGGCACTCTACCGTATGTACAACAAGTGTGAGTCTGCTAAGTGCCTGATGTGGAGGGAAGCATTAAACTTCTAGTACACACTTAGTCGGTAACAACTATCCGAACCTACTCGGACCTGCTTATTGTGTGTATGTTTACGAAGCACCAAACCGCGCTTCCAGCCCAACGTCCTGACGTATTAAAGAGGATACGATTCCGCGCGAGTAGGCTAACGAATACGTTAAGGTTGCGTAATCGATAGAACCCTCGTTCTTATTAAGTGCTATCTGTTCCCTAAAGAGGTGAATAGGCTCCCATCGGTTCGCTATCACAACCCTTATAACGACCTCATCAAGATTAATTGGGACGGGAAGCCTTTATCGGAATGATGAGAAGCCCGACGCGTATCACGCTTAAGTCGGTACATACCAACCTGTCAGTGTTAGCCAAGCACTCGTCACAGAGAACATCCCCTCAGATGGGCGACGCATAACATCGCAGGTCCTGACAAGGCTCGTCTGGCGTCTCTGGATACGGTTGCGGTGTCGCTCCGGAACAGAGTCTCAAGGACTTATCTGGGTGGAGCTGCGCATAACGCCTAAAACGTGCGTCTGATTATTCCGTGCCTGCCTTCATCGTGTGACCGTGCCGTATTCTTCGA",
#     "CCTCGTGAATCGTATGTGAGGCAAACATTTTGAAAGCGGAAGCGAACCCTCGGTATATGGGGGCATTAATGCTCTCGGCAGCAGCGTGGAGTAACGCGAAGCTGATGGAATACTGAGACCTATAAACAATGCATAGTCTCCTGGTCATGAGTAATTTATCGCAGTAGGAAAGCCACTAGCTCGGATCCGGCATCGCCTAATCCAGTGTCGGTCAATAATCATTAGTGGTCGTGTTCCTGGCAATTCGGCATACGATATATTCGAATGATGTCCCGGGCAAACACAACTAATGGCGCTAGAGGCTACTAGTTCGAAGTGAGGATGTGACTGGGATGAACACTGGATCCTGGGCATGTAGCACAGGGCAGCTCCCGTACAGGGTGTTACGGAACCTCCTCCGCTCTTATCTGAATAACAAATCGCTCCCAATTAAGCACTACAACTAAACTGCACTGCATCAAGAAACCAGTTCTGTATTTATGTTACATATAGAGTCTCAGGACCAGGATTTACATCTCAGTTTAAGACCTAAGCGCGAACGGGGGAGTACGTTACCACTCGCTCGGGCCTCGAGGCAGCAGTCATCCCCGTACGGATACTGGGTTCACGACGATGAGTACCTAGTGTAAAGTGTCTCAACGAAAGCGTCTATCAGTTGTACAGATTCTAACACATCAGAGGTAAGCTATTGTACTGCACATCGAGAAGTCGCTGTTGGGCGATAGCTGCTAGAAGCGGTCCCGGACGCCGTAACGACCGTCCGCGGCGAAGCCGACACAGTGGTGTCTCTCTGTTCCGACAGGCCCGAGGGTTGATCCTTAACGCAAGCGAGACTCGTTCCCTAAGATTTTGTCACCGGCTACTTCAATATTAGTTTAGTATCCACTAAAATCATGTGACCTAGCACATCGGGCTCTACGGCACTCCACCAAGGGGCCACTTCTAGCTGGTCGA",
#     "ATGCGCAGCATTTGGGTTAAACAAGTGCATGTTGTTAAATCCCTGGCAGGTCCGGGCGTATACCGTCAGGCATCCACTCGAACCAGGATAAAAGCGTGCGGGTGCCCGGAGTCACAGCACACCAATTCTAATTAAATGCCCCTGAACACAGACTTACCGGGTTGCTTGGGGAGTGTCGACTAGGTAAGCCAACAACGACCAGTCGGTACTCTCAGTAGCCTTACGTGAGTCGCCCAGGGCTACCGAAATCACCTTTGTCGAAACAGCAGAGGTGGTATCTCAGCTCGCCTTATCGCAACGAAGTCACCTCCATGTTGCAAATGTTACCTGCGTACGCGTATGCTTGTATACCGCACGCTGACGGTTAATAGCCACTAAAGATTTCGTAATCGTGTTACCCACAAACAACTGTGGGAACCGCATTCTGTTGCAGCCGACATGCTCTCTACAAATGCACTCGGAACTTTAGATTTAGGCTACATATCATTGACTTCCAAGATCGTAGAACAGCCCAGCCCTTGGCCCTGAACCGGCGTCGTGGCGCATAATAGCACGTGTCGAGGCTCTTTAGGTAAACAATGGAACACACGTACACTCGTCGCTTTATCACAGGAAACCTGACTATTCAGAATGTGGTATAAGGATGAGGTAAGGGCCGTTGATGGTCGGATTAGAGCGGCACCTTTGTGCGGGTCTGTCCCGGGGAGGCTACGGGTCGTCCAACGCTTGGCGTCGCTGGATTCTTGATGTGATGTTCACTCGAATGTTCTGACTTGGCAGGTGTGGGCATGGCTATCAATAAAACCTAAAGAATCTCTTCGGAGCGACAGCACCGATCGTGTGTGGCGGCAGATAGTCGCAACCCCCAGTAAAAAAATGCCTGACCTAAAGGCTTTAGAAATCGGATTCCGGGCCGAGCCGTAAGGCGCGAGCCGGGCAGTCGGAGTTGGA",
#     "TGGGAAGTCTAATCTGGACACTCCCCAACGTGGGTCCTGACAACCGTTGACCAATGTGTCGTTACAGAACCGTACGTGCTACCCACCGGCTTTTGTTGCGGCTGGCCAGAGTCCGATTGGATCTAGAACATGCTTCACGACTACAAATATTTTTTCTACTATGCCTCTATGCGATCACGGGAAAGACAAGGGATCGAGAGAGATTAAGTAGGCAGGTGGATGCTGCATAGGTCAACTCATGTACTTTTTGCAAGGGGGTTAGGGGCCTCCGCATTTCGACAAGATACGGATAAGCGGTTATCCTTATCGCCAGCTGAGAGACGCTCTTCTAGTGGCTCCGTGACTTATTACGAAAGGTCAAAGCGTACTCGGAAGAAGAGGCCGCAACTCTAGAAGCATACTCGGGGAGAGGCACATAGTCAGCTAATTTGAGCTGACAAAAGACGCACGCTAACCACTGATAGCACAGGATATTTACTGACAATCATGTATCCCCCGCCTCACACCCGCCATCCATGTGGTACGAGCTGGGGTCCTGGTGCCCGGGAGGCTCCTTTCCACTCGTCACACAGAGGAATTGACCGCCGTATTCCAAGACCTACCTCGTGCTCCAGCGTACGTGCACGAGAGCAGTTCATACTCACCAGGTGTCTTAGTGGCGCTTGAATCAAGGACAAGGAAACTATCACAGAACAATGGTTATCGCGGGTTCGTTTGTGTGTGGGCCATTTCGTAAGAATACACGGTACGATTACTGGTGTGGCTGTGGAACTGCGCACCTGCCGACGTTCTATCAGTACATTCACTATAGCTCCGAAAAGAACGGGGCTTTAGCCTTTGTGGAGGGAAAGGGCCCCCATATATCTCGGACATTAGGCGTAGTAACCGATGCGCCCCACTACACTAAGCGTTTCCGGACTTATTACGGCTTACACGTACTTACGCATGTTAAG"
# ]
# print(Count(motifs))

# def Consensus(motifs):
#     k = len(motifs[0])
#     count = Count(motifs)
#     # {
#     # 'A': [5, 1, 0, 0, 5, 5, 0, 0], 
#     # 'C': [0, 0, 1, 4, 2, 0, 6, 1], 
#     # 'G': [1, 1, 6, 3, 0, 1, 0, 0], 
#     # 'T': [1, 5, 0, 0, 0, 1, 1, 6]}
#     consensus = ""
#     for j in range(k):
#         m = 0
#         frequentSymbol = ""
#         for symbol in "ACGT":
#             if count[symbol][j] > m:
#                 m = count[symbol][j]
#                 frequentSymbol = symbol
#         consensus += frequentSymbol
#     return consensus
# print(Consensus(motifs))

from collections import defaultdict

def parse_fasta(fasta_str):
    sequences = []
    current_seq = ''
    for line in fasta_str.strip().splitlines():
        if line.startswith('>'):
            if current_seq:
                sequences.append(current_seq)
                current_seq = ''
        else:
            current_seq += line.strip()
    sequences.append(current_seq)
    return sequences

def build_profile_matrix(sequences):
    length = len(sequences[0])
    profile = {'A': [0]*length, 'C': [0]*length, 'G': [0]*length, 'T': [0]*length}
    
    for seq in sequences:
        for i, base in enumerate(seq):
            profile[base][i] += 1
    return profile

def get_consensus(profile):
    consensus = ''
    for i in range(len(next(iter(profile.values())))):
        max_base = max(profile, key=lambda base: profile[base][i])
        consensus += max_base
    return consensus

# Sample input as a multiline string
fasta_input = """>Rosalind_6219
CCGCTGGCCATAGTTTACAGTAGGGCGTCTCATAGGGCCACCGGCAAAAACGAGCTCCGA
>Rosalind_5822
AAGTCGTAGTGACGCAAGTAATTTAGTACAGGCATCAGTTAATACTCAGTGTTCGTTGGT
>Rosalind_0110
GGCCGGTCTGCCTTTGAACGATAGTTGGCTACTAGTTGAGCCCGGGATATTTCCAACGAG
"""

# Run the functions
sequences = parse_fasta(fasta_input)
profile = build_profile_matrix(sequences)
consensus = get_consensus(profile)

# Output
print(consensus)
for base in "ACGT":
    print(f"{base}: {' '.join(map(str, profile[base]))}")
